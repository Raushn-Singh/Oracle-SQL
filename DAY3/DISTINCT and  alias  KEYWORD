
2. Data Manipulation Language(DML):
================================
INSERT:
=======
	- to insert a new row data into a table.

method-1:
=========
insert into <table name> values(value1,value2,.........);

Ex:
SQL> CONN system/tiger
SQL> CREATE USER MYDB4PM IDENTIFIED BY MYDB4PM;
SQL> GRANT CONNECT,CREATE TABLE,UNLIMITED TABLESPACE TO MYDB4PM;

SQL> CONN MYDB4PM/MYDB4PM
SQL> CREATE TABLE STUDENT(STID INT,SNAME VARCHAR2(10),SFEE NUMBER(6,2));
SQL> INSERT INTO STUDENT VALUES(1,'SMITH',2500);

method-2:
========
insert into <table name>(required column names)values(value1,value2,.....);

EX:
SQL> INSERT INTO STUDENT(STID,SNAME,SFEE)VALUES(2,'WARD',4200);
SQL> INSERT INTO STUDENT(STID,SNAME)VALUES(3,'JONES');
SQL> INSERT INTO STUDENT(STID)VALUES(4);
SQL> INSERT INTO STUDENT(SFEE,STID,SNAME) VALUES(3500,5,'ADAMS');

HOW TO INSERT MULTIPLE ROWS INTO A TABLE:
===========================================
	& : insert values into columns by dynamically.

method-1:
=========
insert into <tn> values(&<col1>,&<col2>,.....);

EX:
SQL> INSERT INTO STUDENT VALUES(&STID,'&SNAME',&SFEE);
Enter value for stid: 7
Enter value for sname: MILLER
Enter value for sfee: 3300

SQL> / ( RE-EXECUTE THE LAST EXECUTED SQL QUERY IN SQLPLUS)
........................................
.......................................
.......................................

method-2:
=========
insert into <tn>(<COL1>,<COL2>,....) values(&<col1>,&<col2>,.....);

EX:
SQL> INSERT INTO STUDENT(STID)VALUES(&STID);
Enter value for stid: 10

SQL> /
...................................

HOW TO INSERT "NULLS" INTO A TABLE:
===================================
METHOD-1:
==========
SQL> INSERT INTO STUDENT VALUES(NULL,NULL,NULL);

METHOD-2:
=========
SQL> INSERT INTO STUDENT(STID,SNAME,SFEE)VALUES(NULL,NULL,NULL);

UPDATE:
========
	- to update all rows data in a table.
				(or)
	- to update a specific row data in a table by using "where" condition.

syntax:
======
update <tn> set <column name1>=<value1>,<column name2>=<value2>,......
........... [ where <condition> ];

Ex:
SQL> UPDATE STUDENT SET
  2  STID=1021,
  3  SNAME='SCOTT',
  4  SFEE=8000
  5  WHERE STID=1;

Ex:
SQL> UPDATE STUDENT SET
  2  SNAME='SMITH',
  3  SFEE= 5000
  4  WHERE STID=7;

Ex:
SQL> UPDATE STUDENT SET
  2  SFEE=6200
  3  WHERE STID=11;

Ex:
SQL> UPDATE STUDENT SET
  2  STID=8
  3  SNAME='MILLER',
  4  SFEE=2200
  5  WHERE STID IS NULL;

EX:
SQL> UPDATE STUDENT SET
  2  SNAME='WARNER'
  3  WHERE SNAME IS NULL;

EX:
SQL> UPDATE STUDENT SET
  2  STID=NULL,
  3  SNAME=NULL,
  4  SFEE=NULL
  5  WHERE STID=6;

EX:
SQL> UPDATE STUDENT SET
  2  SNAME=NULL
  3  WHERE SNAME='SMITH';

EX:
SQL> UPDATE STUDENT SET SFEE=5000;

DELETE:
=======
	- to delete all  rows from a table at a time.
		(or)
	- to delete a specific row from a table by using "where" condition.

syntax:
=======
delete from <table name> [where <condition>];

EX:
SQL> DELETE FROM STUDENT WHERE SNAME='WARNER';
SQL> DELETE FROM STUDENT WHERE SNAME IS NULL;
SQL> DELETE FROM STUDENT;
SQL> DELETE FROM STUDENT WHERE STID IS NULL;

DELETE vs TRUNCATE:
====================

	DELETE			TRUNCATE
	========			=========
1. can delete a specific row.		1. no. 

2. supporting "where" condition.	2. not supports.

3. temporary data deletion.		3. permanent data deletion.

4. can restore deleted data		4. not possible.
by  using "rollback".

5. execution speed is slow.		5. execution speed is fast.
(deleting rows in one by one)		(deleting all rows as a page)

3. Data Retrieval / Query Language (DRL / DQL):
========================================
SELECT:
=======
	- to retrieval all rows from a table.
		(or)
	- to retrieval a specific row from a table by using "where" condition.

syntax:
======
SELECT  * / <LIST OF COLUMNS> FROM <TABLE NAME> [WHERE <CONDITION>];

	Here, " * " ----------- all columns in a table.

EX:
SQL> SELECT * FROM EMP;
SQL> SELECT EMPNO,ENAME,SAL FROM EMP;
SQL> SELECT EMPNO,ENAME,SAL FROM EMP WHERE DEPTNO=20;
SQL> SELECT * FROM EMP WHERE JOB='MANAGER';
SQL> SELECT * FROM EMP WHERE EMPNO=7788;
SQL> SELECT * FROM EMP WHERE COMM IS NOT NULL;
SQL> SELECT * FROM EMP WHERE COMM IS NULL;

CONCATENATION OPERATOR(||):
============================
	- to add / join two or more than two string expressions.

syntax:
======
	<string1> || <string2> || <string3> || ...........................

EX:
SQL> SELECT 'Mr.'||ENAME||' '||'WORKING AS A'||' '||JOB FROM EMP;

OUTPUT:
---------------
Mr.SMITH WORKING AS A CLERK

ALIAS NAMES:
=============
	- it is a temporary name / alternate name.
	- created at two levels those are

i) column level alias names:
=======================
	- when we created alias name for columns then we called as
column level alias name.

ii) table level alias names:
======================
	- when we created alias name for table then we called as 
a table level alias name.

syntax:
======
select <column name1> <column alias name1>,<column name2> <column alias name2>,.........from <tn> <table alias name>;

Ex:
SQL> SELECT DEPTNO X,DNAME Y,LOC Z FROM DEPT D;

DISTINCT KEYWORD:
==================
	- to eliminate duplicate values from a column.
syntax:
======
	distinct <column name>

Ex:
SQL> SELECT DISTINCT JOB FROM EMP;
SQL> SELECT DISTINCT DEPTNO FROM EMP;
SQL> SELECT DISTINCT DEPTNO FROM EMP ORDER BY DEPTNO;

PAGESIZE n:
==========
	- to display no.of rows per a single page.
	- by default a page can display 14 rows only.
	- "n" ---- no.of rows.
	- maximum rows upto 50000.
syntax:
=======
set pagesize n;

Ex:
set pagesize 100;

Lines n:
=======
	- to assign no.of bytes to each line in sqlplus environment.
	- by default each line is having 80 bytes.
	- here "n" ----- no.of bytes.
	- maximum size for a line is upto 32767 bytes.
syntax:
======
set lines n;

Ex:
set lines 160;

HOW TO CREATE A NEW TABLE FROM AN EXISTING TABLE(OLD TABLE):
=============================================================
SYNTAX FOR CREATED TABLE WITH COPY OF ALL ROWS & COLUMNS:
===========================================================
SYNTAX:
========
CREATE TABLE <NEW TN> AS SELECT * FROM <OLD TN>;

EX:
SQL> CREATE TABLE NEWDEPT AS SELECT * FROM DEPT;
		(OR)
SQL> CREATE TABLE NEWDEPT1 AS SELECT * FROM DEPT WHERE 1=1;

SYNTAX FOR CREATED TABLE WITH COPY OF COLUMNS BUT NOT ROWS:
==============================================================
SYNTAX:
========
CREATE TABLE <NEW TN> AS SELECT * FROM <OLD TN> 
WHERE <FALSE CONDITION>;

EX:
SQL> CREATE TABLE NEWDEPT2 AS SELECT * FROM DEPT WHERE 1=2;

CREATED TABLE WITH SPECIFIC ROWS:
==================================
SYNTAX:
========
CREATE TABLE <NEW TN> AS SELECT * FROM <OLD TN> 
WHERE <ROW CONDITION>;

EX:
CREATE TABLE NEWEMP AS SELECT  * FROM EMP WHERE DEPTNO=20;

CREATED TABLE WITH SPECIFIC COLUMNS:
=====================================
SYNTAX:
========
CREATE TABLE <NEW TN> AS SELECT <LIST OF COLUMNS> FROM <OLD TN> ;

EX:
CREATE TABLE NEWEMP1 AS SELECT  EMPNO,ENAME,SAL FROM EMP; 

HOW COPY DATA FROM ONE TABLE TO ANOTHER TABLE:
================================================
SYNTAX:
========
INSERT INTO <DESTINATION TN> SELECT * FROM <SOURCE TN>;

EX:
SQL> SELECT * FROM DEPT;
SQL> CREATE TABLE DUMMYDEPT AS SELECT * FROM DEPT WHERE 1=0;

SQL> SELECT * FROM DEPT;--------------------SOURCE TABLE
SQL> SELECT * FROM DUMMYDEPT;-------DESTINATION TABLE

SQL> INSERT INTO DUMMYDEPT SELECT * FROM DEPT;

INSERT ALL:
===========
	- TO INSERT ROWS INTO MULTIPLE TABLES BUT ROWS(DATA)
MUST BE AN EXISTING TABLE ONLY.

SYNTAX:
========
INSERT ALL INTO <TN1> VALUES(<COL1>,<COL2>,......)
INTO <TN2> VALUES(<COL1>,<COL2>,...........................)
............................................................................................
............................................................................................
INTO <TN n> VALUES(<COL1>,<COL2>,..........................)
SELECT * FROM <OLD TABLE NAME>;

EX:
CREATE THREE EMPTY TABLES:
============================
SQL> CREATE TABLE TEST1 AS SELECT * FROM DEPT WHERE 1=0;
SQL> CREATE TABLE TEST2 AS SELECT * FROM DEPT WHERE 1=0;
SQL> CREATE TABLE TEST3 AS SELECT * FROM DEPT WHERE 1=0;

SQL> INSERT ALL INTO TEST1 VALUES(DEPTNO,DNAME,LOC)
  2  INTO TEST2 VALUES(DEPTNO,DNAME,LOC)
  3  INTO TEST3 VALUES(DEPTNO,DNAME,LOC)
  4  SELECT * FROM DEPT;

SQL> SELECT * FROM TEST1;
SQL> SELECT * FROM TEST2;
SQL> SELECT * FROM TEST3;







		



	

















	















































































































































































			
























































































































						







				
				


























































					







		













































	
